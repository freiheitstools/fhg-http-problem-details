package io.github.freiheitstools.httpproblemdetails.base;

import java.net.URI;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Vanilla base class with all properties to provide a HTTP Problem Detail report aligned
 * with <a href="https://datatracker.ietf.org/doc/html/rfc7807">RFC 7807 - Problem Details for HTTP APIs</a>.
 *
 * @see <a href="https://datatracker.ietf.org/doc/html/rfc7807">RFC 7807 - Problem Details for HTTP APIs</a>
 *
 * {@index HTTP Prodlem Detail}
 */
public class VanillaHttpProblemDetail {

  private Integer status;

  private CharSequence detail;

  private CharSequence title;

  private URI type;

  private URI instance;


  /**
   * A URI reference that identifies the problem type.
   *
   * @return a URI identifying the type of the problem if present.
   */
  public Optional<URI> getType() {
    return Optional.ofNullable(type);
  }

  /**
   * Sets a URI reference that identifies the type of the problem.
   *
   * @param uri the type of the problem, must be not {@code null}
   *
   * @throws NullPointerException if {@code uri} is {@code null}
   */
  public void setType(URI uri) {
    this.type = Objects.requireNonNull(uri);
  }

  /**
   * Sets a URI reference that identifies the type of the problem.
   *
   * @param uri the type of the problem, must be not {@code null}
   *
   * @throws NullPointerException if {@code uri} is {@code null}
   * @throws IllegalArgumentException if the given string violates
   *         <a href="https://datatracker.ietf.org/doc/rfc2396/">RFC 2396</a>
   */
  public void setType(String uri) {
    this.type = URI.create(uri);
  }

  /**
   * Returns a short, human-readable summary of the problem type.
   *
   * @return a human-readable summary of the problem if present.
   */
  public Optional<CharSequence> getTitle() {
    return Optional.ofNullable(title);
  }

  /**
   * Sets a short, human-readable summary of the problem type
   *
   * @param title the summary of the problem type, must be not {@code null}
   *
   * @throws NullPointerException if {@code title} is {@code null}
   */
  public void setTitle(CharSequence title) {
    this.title = title.toString();
  }

  /**
   * Returns a human-readable explanation specific to this occurrence
   * of the problem.
   *
   * @return a human-readable explanation of the problem if present
   */
  public Optional<CharSequence> getDetail() {
    return Optional.ofNullable(detail);
  }

  /**
   * Sets a human-readable explanation specific to this occurrence
   * of the problem.
   *
   * @param detail the explanation of the problem, must be not {@code null}
   */
  public void setDetail(CharSequence detail) {
    this.detail = detail.toString();
  }

  /**
   * Returns the HTTP status code generated by the origin server for
   * this occurrence of the problem.
   *
   * @return the HTTP status code generated by the origin server if present
   */
  public Optional<Integer> getStatus() {
    return Optional.ofNullable(status);
  }


  /**
   * Sets the HTTP status code generated by the origin server for
   * this occurrence of the problem.
   *
   * @param status the status by the origin HTTP server, must be not {@code null}
   *
   * @throws NullPointerException if {@code status} is null
   */
  public void setStatus(Integer status) {
    this.status = Objects.requireNonNull(status);
  }

  /**
   * Returns a URI reference that identifies the specific occurrence of the problem.
   *
   * @return a URI reference if present
   */
  public Optional<URI> getInstance() {
    return Optional.ofNullable(instance);
  }

  /**
   * Sets a URI reference that identifies the specific occurrence of the problem.
   *
   * @param uri a URI refrerence, must be not {@code null}
   *
   * @throws NullPointerException if {@code uri} is null
   */
  public void setInstance(URI uri) {
    this.instance = Objects.requireNonNull(uri);
  }

  /**
   * Sets a URI reference that identifies the specific occurrence of the problem.
   *
   * @param uri a URI refrerence, must be not {@code null}
   *
   * @throws NullPointerException if {@code uri} is null
   * @throws IllegalArgumentException if the given string violates
   *         <a href="https://datatracker.ietf.org/doc/rfc2396/">RFC 2396</a>
   */
  public void setInstance(String uri) {
    this.instance = URI.create(uri);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int hashCode() {
    return Objects.hash(getDetail(), getTitle(), getInstance(), getStatus(), getType());
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    if (other == null || getClass() != other.getClass()) return false;
    VanillaHttpProblemDetail that = (VanillaHttpProblemDetail) other;
    return Objects.equals(status, that.status)
           && Objects.equals(detail, that.detail)
           && Objects.equals(title, that.title)
           && Objects.equals(type, that.type)
           && Objects.equals(instance, that.instance);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String toString() {

    String toString =  Stream.of(getStatus(), getTitle())
      .filter(Optional::isPresent)
      .map(Optional::get)
      .map(Object::toString)
      .collect(Collectors.joining(" - "));

    if (toString == null || toString.trim().isEmpty()) {
      return "n/a";
    }

    return toString;
  }
}
